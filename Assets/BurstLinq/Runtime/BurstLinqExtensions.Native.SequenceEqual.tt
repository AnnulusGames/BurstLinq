<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var types = new string[]
    {
        "byte", "sbyte", "short", "ushort", "int", "uint", "long", "ulong", "float", "double",
        "Vector2", "Vector2Int", "Vector3", "Vector3Int", "Vector4",
        "int2", "int3", "int4",
        "uint2", "uint3", "uint4",
        "float2", "float3", "float4",
        "double2", "double3", "double4",
    };

    bool IsFloats(string type)
    {
        return type is "float"  or "float2" or "float3" or "float4"  or "Vector2" or "Vector3" or "Vector4";
    }
    bool IsDoubles(string type)
    {
        return type is  "double" or  "double2" or "double3" or "double4" ;
    }
#>

using System.Runtime.CompilerServices;
using Unity.Burst;
using Unity.Burst.CompilerServices;
using Unity.Burst.Intrinsics;
using Unity.Collections;
using Unity.Collections.LowLevel.Unsafe;
using Unity.Mathematics;
using UnityEngine;

namespace BurstLinq
{
    public unsafe static partial class BurstLinqExtensions
    {
<# foreach(var type in types) { #>
        public static bool SequenceEqual(this NativeList<<#=type#>> first, NativeList<<#=type#>> second)
        {
            if (first.Length != second.Length) return false;
            return SequenceEqualCore((<#=type#>*)first.GetUnsafePtr(), (<#=type#>*)second.GetUnsafePtr(), first.Length);
        }

        public static bool SequenceEqual(this NativeSlice<<#=type#>> first, NativeSlice<<#=type#>> second)
        {
            if (first.Length != second.Length) return false;
            return SequenceEqualCore((<#=type#>*)first.GetUnsafePtr(), (<#=type#>*)second.GetUnsafePtr(), first.Length);
        }

        public static bool SequenceEqual(this NativeArray<<#=type#>> first, NativeArray<<#=type#>> second)
        {
            if (first.Length != second.Length) return false;
            return SequenceEqualCore((<#=type#>*)first.GetUnsafePtr(), (<#=type#>*)second.GetUnsafePtr(), first.Length);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static bool SequenceEqualCore(<#=type#>* firstPtr, <#=type#>* secondPtr, [AssumeRange(0, int.MaxValue)] int length)
        {
<# if (IsFloats(type)){#>
            return CmpHelpers.FloatCmp((float*)firstPtr, (float*)secondPtr, length*(sizeof(<#=type#>) / sizeof(float)));
<# } else if(IsDoubles(type)){#>
            return CmpHelpers.DoubleCmp((double*)firstPtr, (double*)secondPtr, length*(sizeof(<#=type#>) / sizeof(double)));
<# } else{#>
            return CmpHelpers.MemCmp(firstPtr, secondPtr, length * (sizeof(<#=type#>)));  
<# } #>
        }

<# } #>
    }
}