<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var types = new string[]
    {
        "int", "uint", "long", "ulong", "float", "double",
        "Vector2", "Vector2Int", "Vector3", "Vector3Int", "Vector4",
        "int2", "int3", "int4",
        "uint2", "uint3", "uint4",
        "float2", "float3", "float4",
        "double2", "double3", "double4",
    };

    bool TryGetTwiceVector(string type, out string longer)
    {
        longer = null;
        switch (type)
        {
            case "int2": longer = "int4"; return true;
            case "uint2": longer = "uint4"; return true;
            case "float2": longer = "float4"; return true;
            case "double2": longer = "double4"; return true;
            case "Vector2": longer = "float4"; return true;
            case "Vector2Int": longer = "int4"; return true;
            default: return false;
        }
    }
    
#>
using Unity.Burst;
using Unity.Burst.CompilerServices;
using Unity.Collections;
using Unity.Collections.LowLevel.Unsafe;
using Unity.Mathematics;
using UnityEngine;

namespace BurstLinq
{
    public unsafe static partial class BurstLinqExtensions
    {
<# foreach(var type in types) { #>
        public static <#=type#> Sum(this NativeList<<#=type#>> source)
        {
            Error.ThrowIfEmpty(source.Length);
            SumCore((<#=type#>*)source.GetUnsafePtr(), source.Length, out var result);
            return result;
        }

        public static <#=type#> Sum(this NativeSlice<<#=type#>> source)
        {
            Error.ThrowIfEmpty(source.Length);
            SumCore((<#=type#>*)source.GetUnsafePtr(), source.Length, out var result);
            return result;
        }

        public static <#=type#> Sum(this NativeArray<<#=type#>> source)
        {
            Error.ThrowIfEmpty(source.Length);
            SumCore((<#=type#>*)source.GetUnsafePtr(), source.Length, out var result);
            return result;
        }

<#if (TryGetTwiceVector(type, out var twiceType)) { #>
        [BurstCompile(FloatMode = FloatMode.Fast)]
        internal static void SumCore(<#=type#>* ptr, [AssumeRange(1, int.MaxValue)] int length, out <#=type#> result)
        {
            SumCore((<#=twiceType#>*)ptr, length / 2, out var sum2);
            var sum = new <#=type#>(sum2.x + sum2.z, sum2.y + sum2.w);
            if (length % 2 == 1) sum += ptr[length - 1];
            result = sum;
        }
<# } else { #>
        [BurstCompile(FloatMode = FloatMode.Fast)]
        internal static void SumCore(<#=type#>* ptr, [AssumeRange(1, int.MaxValue)] int length, out <#=type#> result)
        {
            var sum = default(<#=type#>);
            for (int i = 0; i < length; i++) sum += ptr[i];
            result = sum;
        }
<# } #>

<# } #>
    }
}